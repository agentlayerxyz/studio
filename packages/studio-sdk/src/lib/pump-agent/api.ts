/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/tool/twitter/tweet": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Create a tweet or reply to an existing tweet on X (formerly Twitter) */
        post: operations["twitter-tweet"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/tool/twitter/retweet": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Retweet a tweet on X */
        post: operations["twitter-retweet"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/tool/twitter/like": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Like a tweet on X */
        post: operations["twitter-likeTweet"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/tool/twitter/user-info": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get user info by username */
        get: operations["twitter-userInfo"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/tool/twitter/user-tweets": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get recent tweets by username or by the default user */
        get: operations["twitter-userTweets"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/tool/twitter/search": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Search tweets by query */
        get: operations["twitter-searchTweets"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/tool/twitter/mentions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get mentions by username */
        get: operations["twitter-mentions"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/tool/twitter/by-conversation-id": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get tweets by conversation id, which is the id of the tweet that started the conversation */
        get: operations["twitter-tweetByConversationId"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/tool/twitter/followers": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get followers by username */
        get: operations["twitter-followers"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/tool/twitter/following": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get following by username */
        get: operations["twitter-following"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/tool/twitter/by-tweet-id": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get tweet by tweet id */
        get: operations["twitter-tweetByTweetId"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/tool/message": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get a list of messages posted to the agent's message board, each message includes recent replies upto the given reply limit */
        get: operations["message-getMessages"];
        put?: never;
        /** @description Create a message on the agent's message board */
        post: operations["message-createMessage"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/tool/message/recent": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get recent messages (original and replies) posted by user to the agent's message board */
        get: operations["message-getRecentMessages"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/tool/message/history": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get the history of messages posted by the agent */
        get: operations["message-getMessageHistory"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/tool/message/stats": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get the number of messages created and total messages on the agent's message board */
        get: operations["message-getMessageStats"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/tool/message/{messageId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get details of a message by its ID, including all replies tracked back to the original message */
        get: operations["message-getMessageDetails"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/tool/message/reset-replies": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Reset message reply cache */
        post: operations["message-resetReplyCache"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/info/basic": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["info-basicInfo"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/info/objectives": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["info-objectives"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/info/persona": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["info-persona"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/info/message-settings": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["info-messageSettings"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/info/twitter-settings": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["info-twitterSettings"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/info/token": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Retrieve various information of the agent's own token */
        get: operations["info-tokenInfo"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/info/token-holders": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["info-tokenHolders"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/info/trading-data": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Retrieve trading data of the agent's own token */
        get: operations["info-tradingData"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/wallet": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["wallet-get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/wallet/transfer": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["wallet-transfer"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/wallet/check-result": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["wallet-checkOperationResult"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/wallet/callback-config": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["wallet-callbackConfigsApi"];
        put: operations["wallet-updateCallbackConfigApi"];
        post: operations["wallet-createCallbackConfigApi"];
        delete: operations["wallet-deleteCallbackConfigApi"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/wallet/callbacks": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["wallet-getCallbacksApi"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/wallet/callback/retry": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["wallet-retryCallbackApi"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/wallet/payment": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["wallet-createPayment"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/wallet/balance-alerts": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["wallet-getBalanceAlertsApi"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/wallet/balance-alert": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put: operations["wallet-updateBalanceAlertApi"];
        post: operations["wallet-createBalanceAlertApi"];
        delete: operations["wallet-deleteBalanceAlertApi"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/holder/all": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["holder-all"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/holder/count": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["holder-count"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /**
         * Invalid input data error (400)
         * @description The error information
         * @example {
         *       "code": "BAD_REQUEST",
         *       "message": "Invalid input data",
         *       "issues": []
         *     }
         */
        "error.BAD_REQUEST": {
            /**
             * @description The error message
             * @example Invalid input data
             */
            message: string;
            /**
             * @description The error code
             * @example BAD_REQUEST
             */
            code: string;
            /**
             * @description An array of issues that were responsible for the error
             * @example []
             */
            issues?: {
                message: string;
            }[];
        };
        /**
         * Authorization not provided error (401)
         * @description The error information
         * @example {
         *       "code": "UNAUTHORIZED",
         *       "message": "Authorization not provided",
         *       "issues": []
         *     }
         */
        "error.UNAUTHORIZED": {
            /**
             * @description The error message
             * @example Authorization not provided
             */
            message: string;
            /**
             * @description The error code
             * @example UNAUTHORIZED
             */
            code: string;
            /**
             * @description An array of issues that were responsible for the error
             * @example []
             */
            issues?: {
                message: string;
            }[];
        };
        /**
         * Insufficient access error (403)
         * @description The error information
         * @example {
         *       "code": "FORBIDDEN",
         *       "message": "Insufficient access",
         *       "issues": []
         *     }
         */
        "error.FORBIDDEN": {
            /**
             * @description The error message
             * @example Insufficient access
             */
            message: string;
            /**
             * @description The error code
             * @example FORBIDDEN
             */
            code: string;
            /**
             * @description An array of issues that were responsible for the error
             * @example []
             */
            issues?: {
                message: string;
            }[];
        };
        /**
         * Internal server error error (500)
         * @description The error information
         * @example {
         *       "code": "INTERNAL_SERVER_ERROR",
         *       "message": "Internal server error",
         *       "issues": []
         *     }
         */
        "error.INTERNAL_SERVER_ERROR": {
            /**
             * @description The error message
             * @example Internal server error
             */
            message: string;
            /**
             * @description The error code
             * @example INTERNAL_SERVER_ERROR
             */
            code: string;
            /**
             * @description An array of issues that were responsible for the error
             * @example []
             */
            issues?: {
                message: string;
            }[];
        };
        /**
         * Not found error (404)
         * @description The error information
         * @example {
         *       "code": "NOT_FOUND",
         *       "message": "Not found",
         *       "issues": []
         *     }
         */
        "error.NOT_FOUND": {
            /**
             * @description The error message
             * @example Not found
             */
            message: string;
            /**
             * @description The error code
             * @example NOT_FOUND
             */
            code: string;
            /**
             * @description An array of issues that were responsible for the error
             * @example []
             */
            issues?: {
                message: string;
            }[];
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    "twitter-tweet": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    content: string;
                    replyToId?: string;
                    quoteId?: string;
                };
            };
        };
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        success: boolean;
                        errors?: unknown[];
                        tweetId?: string;
                    };
                };
            };
            /** @description Invalid input data */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.BAD_REQUEST"];
                };
            };
            /** @description Authorization not provided */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.UNAUTHORIZED"];
                };
            };
            /** @description Insufficient access */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.FORBIDDEN"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.INTERNAL_SERVER_ERROR"];
                };
            };
        };
    };
    "twitter-retweet": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    tweetId: string;
                };
            };
        };
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        success: boolean;
                    };
                };
            };
            /** @description Invalid input data */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.BAD_REQUEST"];
                };
            };
            /** @description Authorization not provided */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.UNAUTHORIZED"];
                };
            };
            /** @description Insufficient access */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.FORBIDDEN"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.INTERNAL_SERVER_ERROR"];
                };
            };
        };
    };
    "twitter-likeTweet": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    tweetId: string;
                };
            };
        };
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        success: boolean;
                    };
                };
            };
            /** @description Invalid input data */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.BAD_REQUEST"];
                };
            };
            /** @description Authorization not provided */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.UNAUTHORIZED"];
                };
            };
            /** @description Insufficient access */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.FORBIDDEN"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.INTERNAL_SERVER_ERROR"];
                };
            };
        };
    };
    "twitter-userInfo": {
        parameters: {
            query: {
                username: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        avatar?: string;
                        banner?: string;
                        biography?: string;
                        birthday?: string;
                        canDm?: boolean;
                        followersCount?: number;
                        followingCount?: number;
                        friendsCount?: number;
                        isBlueVerified?: boolean;
                        isPrivate?: boolean;
                        isVerified?: boolean;
                        joined?: string;
                        likesCount?: number;
                        listedCount?: number;
                        location?: string;
                        mediaCount?: number;
                        name?: string;
                        pinnedTweetIds?: string[];
                        statusesCount?: number;
                        tweetsCount?: number;
                        url?: string;
                        userId?: string;
                        username?: string;
                        website?: string;
                    };
                };
            };
            /** @description Invalid input data */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.BAD_REQUEST"];
                };
            };
            /** @description Authorization not provided */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.UNAUTHORIZED"];
                };
            };
            /** @description Insufficient access */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.FORBIDDEN"];
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.NOT_FOUND"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.INTERNAL_SERVER_ERROR"];
                };
            };
        };
    };
    "twitter-userTweets": {
        parameters: {
            query?: {
                username?: string;
                maxResults?: number;
                includeReplies?: boolean;
                includeRetweets?: boolean;
                output?: "full" | "simple" | "minimum";
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": (({
                        bookmarkCount?: number;
                        conversationId?: string;
                        hashtags?: string[];
                        html?: string;
                        id?: string;
                        inReplyToStatus?: {
                            id?: string;
                            text?: string;
                            permanentUrl?: string;
                            username?: string;
                            userId?: string;
                        };
                        isEdited?: boolean;
                        isPin?: boolean;
                        isQuoted?: boolean;
                        isReply?: boolean;
                        isRetweet?: boolean;
                        isSelfThread?: boolean;
                        likes?: number;
                        mentions?: {
                            id?: string;
                            name?: string;
                            username?: string;
                        }[];
                        name?: string;
                        permanentUrl?: string;
                        photos?: {
                            id?: string;
                            url?: string;
                        }[];
                        quotedStatus?: Record<string, never>;
                        quotedStatusId?: string;
                        replies?: number;
                        retweetedStatus?: Record<string, never>;
                        retweetedStatusId?: string;
                        retweets?: number;
                        sensitiveContent?: boolean;
                        text?: string;
                        thread?: {
                            conversationId?: string;
                            id?: string;
                            text?: string;
                            permanentUrl?: string;
                            username?: string;
                            userId?: string;
                        }[];
                        timeParsed?: string;
                        timestamp?: number;
                        urls?: string[];
                        userId?: string;
                        username?: string;
                        versions?: string[];
                        views?: number;
                    } | {
                        id?: string;
                        conversationId?: string;
                        permanentUrl?: string;
                        text?: string;
                        timestamp?: number;
                        username?: string;
                        userId?: string;
                        photos?: {
                            id?: string;
                            url?: string;
                        }[];
                        views?: number;
                        likes?: number;
                        retweets?: number;
                        replies?: number;
                        bookmarkCount?: number;
                        hashtags?: string[];
                        mentions?: number;
                        /** @enum {string} */
                        type?: "tweet" | "reply" | "quote" | "retweet";
                        originalTweet?: string;
                    }) | {
                        id?: string;
                        text?: string;
                        timestamp?: number;
                        username?: string;
                        photos?: {
                            id?: string;
                            url?: string;
                        }[];
                        views?: number;
                        likes?: number;
                        retweets?: number;
                        mentions?: number;
                        /** @enum {string} */
                        type?: "tweet" | "reply" | "quote" | "retweet";
                        originalTweet?: string;
                    })[];
                };
            };
            /** @description Invalid input data */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.BAD_REQUEST"];
                };
            };
            /** @description Authorization not provided */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.UNAUTHORIZED"];
                };
            };
            /** @description Insufficient access */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.FORBIDDEN"];
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.NOT_FOUND"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.INTERNAL_SERVER_ERROR"];
                };
            };
        };
    };
    "twitter-searchTweets": {
        parameters: {
            query: {
                /** @description Search query */
                query: string;
                /** @description Max results */
                maxResults?: number;
                mode?: number;
                output?: "full" | "simple" | "minimum";
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": (({
                        bookmarkCount?: number;
                        conversationId?: string;
                        hashtags?: string[];
                        html?: string;
                        id?: string;
                        inReplyToStatus?: {
                            id?: string;
                            text?: string;
                            permanentUrl?: string;
                            username?: string;
                            userId?: string;
                        };
                        isEdited?: boolean;
                        isPin?: boolean;
                        isQuoted?: boolean;
                        isReply?: boolean;
                        isRetweet?: boolean;
                        isSelfThread?: boolean;
                        likes?: number;
                        mentions?: {
                            id?: string;
                            name?: string;
                            username?: string;
                        }[];
                        name?: string;
                        permanentUrl?: string;
                        photos?: {
                            id?: string;
                            url?: string;
                        }[];
                        quotedStatus?: Record<string, never>;
                        quotedStatusId?: string;
                        replies?: number;
                        retweetedStatus?: Record<string, never>;
                        retweetedStatusId?: string;
                        retweets?: number;
                        sensitiveContent?: boolean;
                        text?: string;
                        thread?: {
                            conversationId?: string;
                            id?: string;
                            text?: string;
                            permanentUrl?: string;
                            username?: string;
                            userId?: string;
                        }[];
                        timeParsed?: string;
                        timestamp?: number;
                        urls?: string[];
                        userId?: string;
                        username?: string;
                        versions?: string[];
                        views?: number;
                    } | {
                        id?: string;
                        conversationId?: string;
                        permanentUrl?: string;
                        text?: string;
                        timestamp?: number;
                        username?: string;
                        userId?: string;
                        photos?: {
                            id?: string;
                            url?: string;
                        }[];
                        views?: number;
                        likes?: number;
                        retweets?: number;
                        replies?: number;
                        bookmarkCount?: number;
                        hashtags?: string[];
                        mentions?: number;
                        /** @enum {string} */
                        type?: "tweet" | "reply" | "quote" | "retweet";
                        originalTweet?: string;
                    }) | {
                        id?: string;
                        text?: string;
                        timestamp?: number;
                        username?: string;
                        photos?: {
                            id?: string;
                            url?: string;
                        }[];
                        views?: number;
                        likes?: number;
                        retweets?: number;
                        mentions?: number;
                        /** @enum {string} */
                        type?: "tweet" | "reply" | "quote" | "retweet";
                        originalTweet?: string;
                    })[];
                };
            };
            /** @description Invalid input data */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.BAD_REQUEST"];
                };
            };
            /** @description Authorization not provided */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.UNAUTHORIZED"];
                };
            };
            /** @description Insufficient access */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.FORBIDDEN"];
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.NOT_FOUND"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.INTERNAL_SERVER_ERROR"];
                };
            };
        };
    };
    "twitter-mentions": {
        parameters: {
            query?: {
                username?: string;
                /** @description Max results */
                maxResults?: number;
                output?: "full" | "simple" | "minimum";
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": (({
                        bookmarkCount?: number;
                        conversationId?: string;
                        hashtags?: string[];
                        html?: string;
                        id?: string;
                        inReplyToStatus?: {
                            id?: string;
                            text?: string;
                            permanentUrl?: string;
                            username?: string;
                            userId?: string;
                        };
                        isEdited?: boolean;
                        isPin?: boolean;
                        isQuoted?: boolean;
                        isReply?: boolean;
                        isRetweet?: boolean;
                        isSelfThread?: boolean;
                        likes?: number;
                        mentions?: {
                            id?: string;
                            name?: string;
                            username?: string;
                        }[];
                        name?: string;
                        permanentUrl?: string;
                        photos?: {
                            id?: string;
                            url?: string;
                        }[];
                        quotedStatus?: Record<string, never>;
                        quotedStatusId?: string;
                        replies?: number;
                        retweetedStatus?: Record<string, never>;
                        retweetedStatusId?: string;
                        retweets?: number;
                        sensitiveContent?: boolean;
                        text?: string;
                        thread?: {
                            conversationId?: string;
                            id?: string;
                            text?: string;
                            permanentUrl?: string;
                            username?: string;
                            userId?: string;
                        }[];
                        timeParsed?: string;
                        timestamp?: number;
                        urls?: string[];
                        userId?: string;
                        username?: string;
                        versions?: string[];
                        views?: number;
                    } | {
                        id?: string;
                        conversationId?: string;
                        permanentUrl?: string;
                        text?: string;
                        timestamp?: number;
                        username?: string;
                        userId?: string;
                        photos?: {
                            id?: string;
                            url?: string;
                        }[];
                        views?: number;
                        likes?: number;
                        retweets?: number;
                        replies?: number;
                        bookmarkCount?: number;
                        hashtags?: string[];
                        mentions?: number;
                        /** @enum {string} */
                        type?: "tweet" | "reply" | "quote" | "retweet";
                        originalTweet?: string;
                    }) | {
                        id?: string;
                        text?: string;
                        timestamp?: number;
                        username?: string;
                        photos?: {
                            id?: string;
                            url?: string;
                        }[];
                        views?: number;
                        likes?: number;
                        retweets?: number;
                        mentions?: number;
                        /** @enum {string} */
                        type?: "tweet" | "reply" | "quote" | "retweet";
                        originalTweet?: string;
                    })[];
                };
            };
            /** @description Invalid input data */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.BAD_REQUEST"];
                };
            };
            /** @description Authorization not provided */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.UNAUTHORIZED"];
                };
            };
            /** @description Insufficient access */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.FORBIDDEN"];
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.NOT_FOUND"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.INTERNAL_SERVER_ERROR"];
                };
            };
        };
    };
    "twitter-tweetByConversationId": {
        parameters: {
            query: {
                conversationId: string;
                maxResults?: number;
                output?: "full" | "simple" | "minimum";
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": (({
                        bookmarkCount?: number;
                        conversationId?: string;
                        hashtags?: string[];
                        html?: string;
                        id?: string;
                        inReplyToStatus?: {
                            id?: string;
                            text?: string;
                            permanentUrl?: string;
                            username?: string;
                            userId?: string;
                        };
                        isEdited?: boolean;
                        isPin?: boolean;
                        isQuoted?: boolean;
                        isReply?: boolean;
                        isRetweet?: boolean;
                        isSelfThread?: boolean;
                        likes?: number;
                        mentions?: {
                            id?: string;
                            name?: string;
                            username?: string;
                        }[];
                        name?: string;
                        permanentUrl?: string;
                        photos?: {
                            id?: string;
                            url?: string;
                        }[];
                        quotedStatus?: Record<string, never>;
                        quotedStatusId?: string;
                        replies?: number;
                        retweetedStatus?: Record<string, never>;
                        retweetedStatusId?: string;
                        retweets?: number;
                        sensitiveContent?: boolean;
                        text?: string;
                        thread?: {
                            conversationId?: string;
                            id?: string;
                            text?: string;
                            permanentUrl?: string;
                            username?: string;
                            userId?: string;
                        }[];
                        timeParsed?: string;
                        timestamp?: number;
                        urls?: string[];
                        userId?: string;
                        username?: string;
                        versions?: string[];
                        views?: number;
                    } | {
                        id?: string;
                        conversationId?: string;
                        permanentUrl?: string;
                        text?: string;
                        timestamp?: number;
                        username?: string;
                        userId?: string;
                        photos?: {
                            id?: string;
                            url?: string;
                        }[];
                        views?: number;
                        likes?: number;
                        retweets?: number;
                        replies?: number;
                        bookmarkCount?: number;
                        hashtags?: string[];
                        mentions?: number;
                        /** @enum {string} */
                        type?: "tweet" | "reply" | "quote" | "retweet";
                        originalTweet?: string;
                    }) | {
                        id?: string;
                        text?: string;
                        timestamp?: number;
                        username?: string;
                        photos?: {
                            id?: string;
                            url?: string;
                        }[];
                        views?: number;
                        likes?: number;
                        retweets?: number;
                        mentions?: number;
                        /** @enum {string} */
                        type?: "tweet" | "reply" | "quote" | "retweet";
                        originalTweet?: string;
                    })[];
                };
            };
            /** @description Invalid input data */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.BAD_REQUEST"];
                };
            };
            /** @description Authorization not provided */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.UNAUTHORIZED"];
                };
            };
            /** @description Insufficient access */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.FORBIDDEN"];
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.NOT_FOUND"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.INTERNAL_SERVER_ERROR"];
                };
            };
        };
    };
    "twitter-followers": {
        parameters: {
            query: {
                username: string;
                cursor?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        profiles: {
                            avatar?: string;
                            banner?: string;
                            biography?: string;
                            birthday?: string;
                            canDm?: boolean;
                            followersCount?: number;
                            followingCount?: number;
                            friendsCount?: number;
                            isBlueVerified?: boolean;
                            isPrivate?: boolean;
                            isVerified?: boolean;
                            joined?: string;
                            likesCount?: number;
                            listedCount?: number;
                            location?: string;
                            mediaCount?: number;
                            name?: string;
                            pinnedTweetIds?: string[];
                            statusesCount?: number;
                            tweetsCount?: number;
                            url?: string;
                            userId?: string;
                            username?: string;
                            website?: string;
                        }[];
                        next?: string;
                        previous?: string;
                    };
                };
            };
            /** @description Invalid input data */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.BAD_REQUEST"];
                };
            };
            /** @description Authorization not provided */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.UNAUTHORIZED"];
                };
            };
            /** @description Insufficient access */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.FORBIDDEN"];
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.NOT_FOUND"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.INTERNAL_SERVER_ERROR"];
                };
            };
        };
    };
    "twitter-following": {
        parameters: {
            query: {
                username: string;
                cursor?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        profiles: {
                            avatar?: string;
                            banner?: string;
                            biography?: string;
                            birthday?: string;
                            canDm?: boolean;
                            followersCount?: number;
                            followingCount?: number;
                            friendsCount?: number;
                            isBlueVerified?: boolean;
                            isPrivate?: boolean;
                            isVerified?: boolean;
                            joined?: string;
                            likesCount?: number;
                            listedCount?: number;
                            location?: string;
                            mediaCount?: number;
                            name?: string;
                            pinnedTweetIds?: string[];
                            statusesCount?: number;
                            tweetsCount?: number;
                            url?: string;
                            userId?: string;
                            username?: string;
                            website?: string;
                        }[];
                        next?: string;
                        previous?: string;
                    };
                };
            };
            /** @description Invalid input data */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.BAD_REQUEST"];
                };
            };
            /** @description Authorization not provided */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.UNAUTHORIZED"];
                };
            };
            /** @description Insufficient access */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.FORBIDDEN"];
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.NOT_FOUND"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.INTERNAL_SERVER_ERROR"];
                };
            };
        };
    };
    "twitter-tweetByTweetId": {
        parameters: {
            query: {
                tweetId: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        bookmarkCount?: number;
                        conversationId?: string;
                        hashtags?: string[];
                        html?: string;
                        id?: string;
                        inReplyToStatus?: {
                            id?: string;
                            text?: string;
                            permanentUrl?: string;
                            username?: string;
                            userId?: string;
                        };
                        isEdited?: boolean;
                        isPin?: boolean;
                        isQuoted?: boolean;
                        isReply?: boolean;
                        isRetweet?: boolean;
                        isSelfThread?: boolean;
                        likes?: number;
                        mentions?: {
                            id?: string;
                            name?: string;
                            username?: string;
                        }[];
                        name?: string;
                        permanentUrl?: string;
                        photos?: {
                            id?: string;
                            url?: string;
                        }[];
                        quotedStatus?: Record<string, never>;
                        quotedStatusId?: string;
                        replies?: number;
                        retweetedStatus?: Record<string, never>;
                        retweetedStatusId?: string;
                        retweets?: number;
                        sensitiveContent?: boolean;
                        text?: string;
                        thread?: {
                            conversationId?: string;
                            id?: string;
                            text?: string;
                            permanentUrl?: string;
                            username?: string;
                            userId?: string;
                        }[];
                        timeParsed?: string;
                        timestamp?: number;
                        urls?: string[];
                        userId?: string;
                        username?: string;
                        versions?: string[];
                        views?: number;
                    } | null;
                };
            };
            /** @description Invalid input data */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.BAD_REQUEST"];
                };
            };
            /** @description Authorization not provided */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.UNAUTHORIZED"];
                };
            };
            /** @description Insufficient access */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.FORBIDDEN"];
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.NOT_FOUND"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.INTERNAL_SERVER_ERROR"];
                };
            };
        };
    };
    "message-getMessages": {
        parameters: {
            query?: {
                /** @description Page number */
                page?: number;
                /** @description Page size */
                pageSize?: number;
                /** @description Reply limit */
                replyLimit?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        items: {
                            id: string;
                            agentId: string;
                            message: string;
                            createdAt: string;
                            createdBy: string;
                            deletedAt: string | null;
                            replyToMessage: string | null;
                            replyToUser: string | null;
                            rootMessageId: string | null;
                            replies: {
                                id: string;
                                agentId: string;
                                message: string;
                                createdAt: string;
                                createdBy: string;
                                deletedAt: string | null;
                                replyToMessage: string | null;
                                replyToUser: string | null;
                                rootMessageId: string | null;
                            }[];
                            replyCount: number;
                        }[];
                        totalItems: number;
                        totalPages: number;
                        currentPage: number;
                    };
                };
            };
            /** @description Invalid input data */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.BAD_REQUEST"];
                };
            };
            /** @description Authorization not provided */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.UNAUTHORIZED"];
                };
            };
            /** @description Insufficient access */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.FORBIDDEN"];
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.NOT_FOUND"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.INTERNAL_SERVER_ERROR"];
                };
            };
        };
    };
    "message-createMessage": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    message: string;
                    replyTo?: string;
                };
            };
        };
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        id: string;
                        agentId: string;
                        message: string;
                        createdAt: string;
                        createdBy: string;
                        deletedAt: string | null;
                        replyToMessage: string | null;
                        replyToUser: string | null;
                        rootMessageId: string | null;
                    };
                };
            };
            /** @description Invalid input data */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.BAD_REQUEST"];
                };
            };
            /** @description Authorization not provided */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.UNAUTHORIZED"];
                };
            };
            /** @description Insufficient access */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.FORBIDDEN"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.INTERNAL_SERVER_ERROR"];
                };
            };
        };
    };
    "message-getRecentMessages": {
        parameters: {
            query?: {
                /** @description Maximum number of messages to return, default to 10 and maximum to 100 */
                limit?: number;
                /** @description Lookback time in minutes, default to 360 minutes (6 hours), maximum to 1440 minutes (24 hours) */
                lookbackMinutes?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        messages: {
                            id: string;
                            message: string;
                            createdAt: string;
                            createdBy: string;
                        }[];
                    };
                };
            };
            /** @description Invalid input data */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.BAD_REQUEST"];
                };
            };
            /** @description Authorization not provided */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.UNAUTHORIZED"];
                };
            };
            /** @description Insufficient access */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.FORBIDDEN"];
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.NOT_FOUND"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.INTERNAL_SERVER_ERROR"];
                };
            };
        };
    };
    "message-getMessageHistory": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        messages: {
                            id: string;
                            message: string;
                            createdAt: string;
                            createdBy: string;
                        }[];
                    };
                };
            };
            /** @description Invalid input data */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.BAD_REQUEST"];
                };
            };
            /** @description Authorization not provided */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.UNAUTHORIZED"];
                };
            };
            /** @description Insufficient access */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.FORBIDDEN"];
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.NOT_FOUND"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.INTERNAL_SERVER_ERROR"];
                };
            };
        };
    };
    "message-getMessageStats": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        total: number;
                        selfTotal: number;
                        self24h: number;
                        self7d: number;
                    };
                };
            };
            /** @description Invalid input data */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.BAD_REQUEST"];
                };
            };
            /** @description Authorization not provided */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.UNAUTHORIZED"];
                };
            };
            /** @description Insufficient access */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.FORBIDDEN"];
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.NOT_FOUND"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.INTERNAL_SERVER_ERROR"];
                };
            };
        };
    };
    "message-getMessageDetails": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Message ID */
                messageId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Invalid input data */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.BAD_REQUEST"];
                };
            };
            /** @description Authorization not provided */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.UNAUTHORIZED"];
                };
            };
            /** @description Insufficient access */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.FORBIDDEN"];
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.NOT_FOUND"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.INTERNAL_SERVER_ERROR"];
                };
            };
        };
    };
    "message-resetReplyCache": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": Record<string, never>;
            };
        };
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        success: boolean;
                    };
                };
            };
            /** @description Invalid input data */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.BAD_REQUEST"];
                };
            };
            /** @description Authorization not provided */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.UNAUTHORIZED"];
                };
            };
            /** @description Insufficient access */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.FORBIDDEN"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.INTERNAL_SERVER_ERROR"];
                };
            };
        };
    };
    "info-basicInfo": {
        parameters: {
            query?: {
                format?: "object" | "plain-text";
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string | {
                        name: string;
                        description: string;
                        ticker: string;
                        tokenAddress: string | null;
                        tokenStatus: string;
                        walletAddress: string | null;
                    };
                };
            };
            /** @description Invalid input data */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.BAD_REQUEST"];
                };
            };
            /** @description Authorization not provided */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.UNAUTHORIZED"];
                };
            };
            /** @description Insufficient access */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.FORBIDDEN"];
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.NOT_FOUND"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.INTERNAL_SERVER_ERROR"];
                };
            };
        };
    };
    "info-objectives": {
        parameters: {
            query?: {
                format?: "object" | "plain-text";
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        objectives: string;
                    } | string;
                };
            };
            /** @description Invalid input data */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.BAD_REQUEST"];
                };
            };
            /** @description Authorization not provided */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.UNAUTHORIZED"];
                };
            };
            /** @description Insufficient access */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.FORBIDDEN"];
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.NOT_FOUND"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.INTERNAL_SERVER_ERROR"];
                };
            };
        };
    };
    "info-persona": {
        parameters: {
            query?: {
                format?: "object" | "plain-text";
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string | {
                        [key: string]: number;
                    };
                };
            };
            /** @description Invalid input data */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.BAD_REQUEST"];
                };
            };
            /** @description Authorization not provided */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.UNAUTHORIZED"];
                };
            };
            /** @description Insufficient access */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.FORBIDDEN"];
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.NOT_FOUND"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.INTERNAL_SERVER_ERROR"];
                };
            };
        };
    };
    "info-messageSettings": {
        parameters: {
            query?: {
                format?: "object" | "plain-text";
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string | {
                        [key: string]: unknown;
                    };
                };
            };
            /** @description Invalid input data */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.BAD_REQUEST"];
                };
            };
            /** @description Authorization not provided */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.UNAUTHORIZED"];
                };
            };
            /** @description Insufficient access */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.FORBIDDEN"];
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.NOT_FOUND"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.INTERNAL_SERVER_ERROR"];
                };
            };
        };
    };
    "info-twitterSettings": {
        parameters: {
            query?: {
                format?: "object" | "plain-text";
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string | {
                        [key: string]: unknown;
                    };
                };
            };
            /** @description Invalid input data */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.BAD_REQUEST"];
                };
            };
            /** @description Authorization not provided */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.UNAUTHORIZED"];
                };
            };
            /** @description Insufficient access */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.FORBIDDEN"];
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.NOT_FOUND"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.INTERNAL_SERVER_ERROR"];
                };
            };
        };
    };
    "info-tokenInfo": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        creator: string;
                        status: string;
                        ticker: string;
                        address: string;
                        assetToken: string;
                        price: string;
                        priceUsd: string;
                        marketCap: string;
                        marketCapUsd: string;
                        holderCount: number;
                    };
                };
            };
            /** @description Invalid input data */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.BAD_REQUEST"];
                };
            };
            /** @description Authorization not provided */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.UNAUTHORIZED"];
                };
            };
            /** @description Insufficient access */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.FORBIDDEN"];
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.NOT_FOUND"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.INTERNAL_SERVER_ERROR"];
                };
            };
        };
    };
    "info-tokenHolders": {
        parameters: {
            query?: {
                limit?: number;
                cursor?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        holders: {
                            address: string;
                            balance: string;
                        }[];
                        cursor?: string;
                        hasNext: boolean;
                    };
                };
            };
            /** @description Invalid input data */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.BAD_REQUEST"];
                };
            };
            /** @description Authorization not provided */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.UNAUTHORIZED"];
                };
            };
            /** @description Insufficient access */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.FORBIDDEN"];
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.NOT_FOUND"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.INTERNAL_SERVER_ERROR"];
                };
            };
        };
    };
    "info-tradingData": {
        parameters: {
            query: {
                /** @description The timestamp in seconds */
                since: number;
                type?: "buy" | "sell" | "all";
                /** @description The number of data points to return */
                limit?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        blockTime: number;
                        txnHash: string;
                        from: string;
                        to: string;
                        amount: string;
                        type: string;
                    }[];
                };
            };
            /** @description Invalid input data */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.BAD_REQUEST"];
                };
            };
            /** @description Authorization not provided */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.UNAUTHORIZED"];
                };
            };
            /** @description Insufficient access */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.FORBIDDEN"];
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.NOT_FOUND"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.INTERNAL_SERVER_ERROR"];
                };
            };
        };
    };
    "wallet-get": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        publicKey: string;
                        createdAt: string;
                        metadata: {
                            [key: string]: unknown;
                        };
                        note: string | null;
                    };
                };
            };
            /** @description Invalid input data */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.BAD_REQUEST"];
                };
            };
            /** @description Authorization not provided */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.UNAUTHORIZED"];
                };
            };
            /** @description Insufficient access */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.FORBIDDEN"];
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.NOT_FOUND"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.INTERNAL_SERVER_ERROR"];
                };
            };
        };
    };
    "wallet-transfer": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    chainId: number;
                    tokenAddress: string;
                    to: string | string[];
                    tokenAmount: string | string[];
                    comment?: string;
                    scheduledAt?: string;
                };
            };
        };
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        success: boolean;
                        operationIds: string[];
                        error?: string | string[];
                    };
                };
            };
            /** @description Invalid input data */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.BAD_REQUEST"];
                };
            };
            /** @description Authorization not provided */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.UNAUTHORIZED"];
                };
            };
            /** @description Insufficient access */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.FORBIDDEN"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.INTERNAL_SERVER_ERROR"];
                };
            };
        };
    };
    "wallet-checkOperationResult": {
        parameters: {
            query: {
                operationId: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        id: string;
                        /** @enum {string} */
                        status: "PENDING" | "PROCESSING" | "SUCCESS" | "FAILED" | "CANCELLED";
                        txHash?: string;
                        amount?: string[];
                        to?: string[];
                    };
                };
            };
            /** @description Invalid input data */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.BAD_REQUEST"];
                };
            };
            /** @description Authorization not provided */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.UNAUTHORIZED"];
                };
            };
            /** @description Insufficient access */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.FORBIDDEN"];
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.NOT_FOUND"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.INTERNAL_SERVER_ERROR"];
                };
            };
        };
    };
    "wallet-callbackConfigsApi": {
        parameters: {
            query?: {
                page?: number;
                pageSize?: number;
                type?: "PAYMENT" | "TRANSFER" | "BALANCE";
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        items: {
                            /** @enum {string} */
                            type: "PAYMENT" | "TRANSFER" | "BALANCE";
                            id: string;
                            createdAt: string;
                            updatedAt: string;
                            walletAddress: string;
                            callbackUrl: string;
                            metadata: {
                                [key: string]: unknown;
                            };
                        }[];
                        totalPages: number;
                        totalItems: number;
                        page: number;
                        pageSize: number;
                    };
                };
            };
            /** @description Invalid input data */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.BAD_REQUEST"];
                };
            };
            /** @description Authorization not provided */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.UNAUTHORIZED"];
                };
            };
            /** @description Insufficient access */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.FORBIDDEN"];
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.NOT_FOUND"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.INTERNAL_SERVER_ERROR"];
                };
            };
        };
    };
    "wallet-updateCallbackConfigApi": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    id: string;
                    /** Format: uri */
                    callbackUrl: string;
                };
            };
        };
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @enum {string} */
                        type: "PAYMENT" | "TRANSFER" | "BALANCE";
                        id: string;
                        createdAt: string;
                        updatedAt: string;
                        walletAddress: string;
                        callbackUrl: string;
                        metadata: {
                            [key: string]: unknown;
                        };
                    };
                };
            };
            /** @description Invalid input data */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.BAD_REQUEST"];
                };
            };
            /** @description Authorization not provided */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.UNAUTHORIZED"];
                };
            };
            /** @description Insufficient access */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.FORBIDDEN"];
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.NOT_FOUND"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.INTERNAL_SERVER_ERROR"];
                };
            };
        };
    };
    "wallet-createCallbackConfigApi": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /** @enum {string} */
                    type: "PAYMENT" | "TRANSFER" | "BALANCE";
                    /** Format: uri */
                    callbackUrl: string;
                };
            };
        };
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @enum {string} */
                        type: "PAYMENT" | "TRANSFER" | "BALANCE";
                        id: string;
                        createdAt: string;
                        updatedAt: string;
                        walletAddress: string;
                        callbackUrl: string;
                        metadata: {
                            [key: string]: unknown;
                        };
                    };
                };
            };
            /** @description Invalid input data */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.BAD_REQUEST"];
                };
            };
            /** @description Authorization not provided */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.UNAUTHORIZED"];
                };
            };
            /** @description Insufficient access */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.FORBIDDEN"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.INTERNAL_SERVER_ERROR"];
                };
            };
        };
    };
    "wallet-deleteCallbackConfigApi": {
        parameters: {
            query: {
                id: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        success: boolean;
                    };
                };
            };
            /** @description Invalid input data */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.BAD_REQUEST"];
                };
            };
            /** @description Authorization not provided */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.UNAUTHORIZED"];
                };
            };
            /** @description Insufficient access */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.FORBIDDEN"];
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.NOT_FOUND"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.INTERNAL_SERVER_ERROR"];
                };
            };
        };
    };
    "wallet-getCallbacksApi": {
        parameters: {
            query?: {
                page?: number;
                pageSize?: number;
                type?: "PAYMENT" | "TRANSFER" | "BALANCE";
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        items: {
                            id: string;
                            createdAt: string;
                            updatedAt: string;
                            eventId: string;
                            walletAddress: string;
                            callbackUrl: string;
                            payload: {
                                [key: string]: unknown;
                            };
                            result: {
                                [key: string]: unknown;
                            };
                            configId: string | null;
                            error: string | null;
                        }[];
                        totalPages: number;
                        totalItems: number;
                        page: number;
                        pageSize: number;
                    };
                };
            };
            /** @description Invalid input data */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.BAD_REQUEST"];
                };
            };
            /** @description Authorization not provided */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.UNAUTHORIZED"];
                };
            };
            /** @description Insufficient access */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.FORBIDDEN"];
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.NOT_FOUND"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.INTERNAL_SERVER_ERROR"];
                };
            };
        };
    };
    "wallet-retryCallbackApi": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    id: string;
                };
            };
        };
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        success: boolean;
                    };
                };
            };
            /** @description Invalid input data */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.BAD_REQUEST"];
                };
            };
            /** @description Authorization not provided */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.UNAUTHORIZED"];
                };
            };
            /** @description Insufficient access */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.FORBIDDEN"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.INTERNAL_SERVER_ERROR"];
                };
            };
        };
    };
    "wallet-createPayment": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    paymentWallet: string;
                    amount: string;
                    tokenNetwork: number | string;
                    tokenAddress: string;
                    description: string;
                    metadata?: {
                        [key: string]: string | number | boolean;
                    };
                    expiredInMinutes?: number;
                };
            };
        };
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        id: string;
                        from: string;
                        to: string;
                        amount: string;
                        tokenAddress: string;
                        tokenNetwork: string;
                        description: string;
                        metadata?: {
                            [key: string]: unknown;
                        };
                    };
                };
            };
            /** @description Invalid input data */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.BAD_REQUEST"];
                };
            };
            /** @description Authorization not provided */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.UNAUTHORIZED"];
                };
            };
            /** @description Insufficient access */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.FORBIDDEN"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.INTERNAL_SERVER_ERROR"];
                };
            };
        };
    };
    "wallet-getBalanceAlertsApi": {
        parameters: {
            query?: {
                page?: number;
                pageSize?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        items: {
                            id: string;
                            name: string;
                            createdAt: string;
                            updatedAt: string;
                            walletAddress: string;
                            tokenAddress: string;
                            tokenNetwork: string;
                            /** @enum {string} */
                            type: "BALANCE_ALERT_WARNING" | "BALANCE_ALERT_CRITICAL" | "BALANCE_THRESHOLD";
                            value: string;
                            /** @enum {string} */
                            operator: "GREATER_THAN" | "LESS_THAN" | "EQUAL";
                        }[];
                        totalPages: number;
                        totalItems: number;
                        page: number;
                        pageSize: number;
                    };
                };
            };
            /** @description Invalid input data */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.BAD_REQUEST"];
                };
            };
            /** @description Authorization not provided */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.UNAUTHORIZED"];
                };
            };
            /** @description Insufficient access */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.FORBIDDEN"];
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.NOT_FOUND"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.INTERNAL_SERVER_ERROR"];
                };
            };
        };
    };
    "wallet-updateBalanceAlertApi": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    id: string;
                    name: string;
                    tokenAddress: string;
                    tokenNetwork: string;
                    /** @enum {string} */
                    operator: "GREATER_THAN" | "LESS_THAN" | "EQUAL";
                    value: string;
                };
            };
        };
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        id: string;
                        name: string;
                        createdAt: string;
                        updatedAt: string;
                        walletAddress: string;
                        tokenAddress: string;
                        tokenNetwork: string;
                        /** @enum {string} */
                        type: "BALANCE_ALERT_WARNING" | "BALANCE_ALERT_CRITICAL" | "BALANCE_THRESHOLD";
                        value: string;
                        /** @enum {string} */
                        operator: "GREATER_THAN" | "LESS_THAN" | "EQUAL";
                    };
                };
            };
            /** @description Invalid input data */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.BAD_REQUEST"];
                };
            };
            /** @description Authorization not provided */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.UNAUTHORIZED"];
                };
            };
            /** @description Insufficient access */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.FORBIDDEN"];
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.NOT_FOUND"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.INTERNAL_SERVER_ERROR"];
                };
            };
        };
    };
    "wallet-createBalanceAlertApi": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    name: string;
                    tokenAddress: string;
                    tokenNetwork: string;
                    /** @enum {string} */
                    type: "BALANCE_ALERT_WARNING" | "BALANCE_ALERT_CRITICAL" | "BALANCE_THRESHOLD";
                    /** @enum {string} */
                    operator: "GREATER_THAN" | "LESS_THAN" | "EQUAL";
                    value: string;
                };
            };
        };
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        id: string;
                        name: string;
                        createdAt: string;
                        updatedAt: string;
                        walletAddress: string;
                        tokenAddress: string;
                        tokenNetwork: string;
                        /** @enum {string} */
                        type: "BALANCE_ALERT_WARNING" | "BALANCE_ALERT_CRITICAL" | "BALANCE_THRESHOLD";
                        value: string;
                        /** @enum {string} */
                        operator: "GREATER_THAN" | "LESS_THAN" | "EQUAL";
                    };
                };
            };
            /** @description Invalid input data */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.BAD_REQUEST"];
                };
            };
            /** @description Authorization not provided */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.UNAUTHORIZED"];
                };
            };
            /** @description Insufficient access */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.FORBIDDEN"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.INTERNAL_SERVER_ERROR"];
                };
            };
        };
    };
    "wallet-deleteBalanceAlertApi": {
        parameters: {
            query: {
                id: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        success: boolean;
                    };
                };
            };
            /** @description Invalid input data */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.BAD_REQUEST"];
                };
            };
            /** @description Authorization not provided */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.UNAUTHORIZED"];
                };
            };
            /** @description Insufficient access */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.FORBIDDEN"];
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.NOT_FOUND"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.INTERNAL_SERVER_ERROR"];
                };
            };
        };
    };
    "holder-all": {
        parameters: {
            query: {
                tokenAddress: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        holderAddress: string;
                        tokenAmount: number;
                        tokenAddress: string;
                    }[];
                };
            };
            /** @description Invalid input data */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.BAD_REQUEST"];
                };
            };
            /** @description Authorization not provided */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.UNAUTHORIZED"];
                };
            };
            /** @description Insufficient access */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.FORBIDDEN"];
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.NOT_FOUND"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.INTERNAL_SERVER_ERROR"];
                };
            };
        };
    };
    "holder-count": {
        parameters: {
            query: {
                tokenAddress: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        holderCount: number;
                    };
                };
            };
            /** @description Invalid input data */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.BAD_REQUEST"];
                };
            };
            /** @description Authorization not provided */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.UNAUTHORIZED"];
                };
            };
            /** @description Insufficient access */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.FORBIDDEN"];
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.NOT_FOUND"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.INTERNAL_SERVER_ERROR"];
                };
            };
        };
    };
}
